{"script":"-- key limit intervalMS nowMS [amount]\nlocal key        = KEYS[1]\nlocal limit      = tonumber(ARGV[1])\nlocal intervalMS = tonumber(ARGV[2])\nlocal nowMS      = tonumber(ARGV[3])\nlocal amount     = math.max(tonumber(ARGV[4]), 0)\nlocal force      = ARGV[5] == \"true\"\n\nlocal timestampKey = key .. \":T\"\n\nlocal prevTokens = redis.call('GET',key)\nlocal lastUpdateMS\n\nif prevTokens == false then\n   prevTokens = amount\n   lastUpdateMS = nowMS\nelse\n   lastUpdateMS = redis.call('GET',timestampKey)\n   if(lastUpdateMS == false) then lastUpdateMS = nowMS end\nend\n\nlocal addTokens = ((nowMS - lastUpdateMS) / intervalMS) * limit\nlocal newTokens = math.min(prevTokens + addTokens, limit)\nlocal balanceTokens = newTokens - amount\n\nlocal rejected\nlocal refillDelta\n\nif balanceTokens < 0 then\n   if force then\n      balanceTokens = 0\n      if amount <= limit then\n\t refillDelta = math.ceil((amount / limit) * intervalMS)\n      else\n\t refillDelta = -1\n      end\n      rejected = 0\n   else\n      balanceTokens = newTokens\n      if amount <= limit then\n\t refillDelta = math.ceil(((amount - balanceTokens) / limit) * intervalMS)\n      else\n\t refillDelta = -1\n      end\n      rejected = 1\n   end\nelse\n   local nextBalance = balanceTokens - amount\n   if(nextBalance < 0) then\n      refillDelta = ((0 - nextBalance) / limit) * intervalMS\n   else\n      refillDelta = 0\n   end\n   rejected = 0\nend\n\n-- rejected requests don't cost anything\n-- forced requests show up here as !rejected, but with balanceTokens = 0 (drained)\nif rejected == 0 then\n   redis.call('PSETEX',key,intervalMS,balanceTokens)\n   redis.call('PSETEX',timestampKey,intervalMS,nowMS)\nend\n\nreturn { balanceTokens, rejected, refillDelta }\n","sha1":"1ff936cbc887bfa2137256a4e6afc739f58b61e8"}